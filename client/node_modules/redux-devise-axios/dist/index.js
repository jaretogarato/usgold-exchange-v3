'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var HEADERS = ['access-token', 'token-type', 'client', 'expiry', 'uid'];

var tokenMiddleware = function tokenMiddleware(args) {
  return function (store) {
    return function (next) {
      return function (action) {
        if (!action) action = { type: '' };
        var _args$customHeaders = args.customHeaders,
            customHeaders = _args$customHeaders === undefined ? [] : _args$customHeaders,
            _args$validateAction = args.validateAction,
            validateAction = _args$validateAction === undefined ? 'VALIDATE_TOKEN' : _args$validateAction,
            _args$logoutAction = args.logoutAction,
            logoutAction = _args$logoutAction === undefined ? 'LOGOUT' : _args$logoutAction,
            axios = args.axios;

        HEADERS = [].concat(_toConsumableArray(new Set([].concat(_toConsumableArray(HEADERS), _toConsumableArray(customHeaders)))));
        if (action.type === validateAction) {
          HEADERS.forEach(function (token) {
            return axios.defaults.headers.common[token] = localStorage.getItem(token);
          });
        } else if (action.type === logoutAction) {
          HEADERS.forEach(function (token) {
            localStorage.removeItem(token);
          });
        } else {
          var _action = action,
              headers = _action.headers;

          if (headers) {
            if (headers['access-token']) {
              HEADERS.forEach(function (token) {
                axios.defaults.headers.common[token] = headers[token];
                localStorage.setItem(token, headers[token]);
              });
            }
          }
        }
        return next(action);
      };
    };
  };
};

exports.default = tokenMiddleware;